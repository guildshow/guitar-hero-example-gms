<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/**
Basic Guitar Hero example. Created by Javier Mora (Ciberman). MIT License (Free use)
*/


show_message("Basic Guitar Hero example. Created by Javier Mora (Ciberman). MIT License (Free use)");

global.target_y = room_height - 150;

// notes
note_init();

// create random notes
// notes MUST be added in chronological time
/*var number_notes = 156;
var min_delta_time = get_integer("Minimum time between each note? (in seconds) Recomended: 0 seconds", 0);
var max_delta_time = get_integer("Maximum time between each note? (in seconds) Recomended: 3 seconds", 3);
var image_ind = sprite_get_number(spr_note);
var time = 3; // first note at 3 seconds
for (var i=0; i&lt;number_notes; i++) {
    time+= random_range(min_delta_time, max_delta_time); //random time
    var img = irandom(image_ind-1); //random image_index
    note_add(time, img);
    
}
*/

scr_song_load("output_track_0_amazing.json");

// sync system
music_init(2); 
audio_position_init();
music_start(sound_music);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// sync system step
music_step();


if (mouse_check_button(mb_left)) {
    var yy = mouse_y;
    var xx = mouse_x;
    
    if (yy &lt; 100) {
        var duration = audio_sound_length(global.music);
        audio_sound_set_track_position(global.music, xx / screen_width * duration);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var time = global.music_time;
var total_time = audio_sound_length(global.music);

draw_text(0,32, "TIME: " + string(time));

var progress = time/total_time;


// Draw top bar
draw_healthbar(0,0, room_width, 16, progress * 100, c_black, c_lime, c_lime, 0, true, true);
var sc = .5;
var list_time = global.notes_ds_time;
var list_type = global.notes_ds_type;
var size = ds_list_size(list_time);
for (var i=0; i&lt;size; i++) {
    var p = list_time[| i]/ total_time;
    draw_sprite_ext(spr_note, list_type[| i], p*room_width , 16, sc, sc, 0, c_white, 1);
}




// Draw target line

draw_line_width(0, global.target_y, room_width, global.target_y, 4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
