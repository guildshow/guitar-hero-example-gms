<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_note</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// must be setted from notes_create()
x_start = 0;
y_start = 0;
x_end = 0;
y_end = 0;
time_start = 0;
time_end = 0;
scale_start = 1;
scale_end = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Position difference
var delta_x = x_end - x_start;

// Position difference
var delta_y = y_end - y_start;

// Scale difference
var delta_scale = scale_end - scale_start;

// Time difference
var delta_t = time_end - time_start;

// This is the time that has passed since the note was created
// see music_init() for global.music_time
var current_t = global.music_time - time_start; 

// this is a number from 0, to 1. 
// Where 0 is the time when the note is created and 1 
// the time when the note reach the target position
var frac_t = current_t / delta_t; 

// if you want to ascelerate the note with an animation easing you can use
// one of the Tweenline Animation Engine basic easing functions here
// https://marketplace.yoyogames.com/assets/2909/tweenline-animation-engine
// Like:
// frac_t = ease_quad(frac_t);


// Set the final position of the note
x = x_start + delta_x * frac_t;
y = y_start + delta_y * frac_t;
image_xscale = scale_start + delta_scale * frac_t * (-frac_t);
image_yscale = image_xscale;

// If we have reached a 20% more than the target time}
// Change to 1.5 if you want to destroy the note outside the screen
var frac_end_t = (current_t / (delta_t + duration));
if ( frac_end_t &gt; 1) {
    // destroy the note
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

var ww = sprite_width/4;
var delta_y = y_end - y_start;


if (duration &gt; 0) {
    var yy_top = y - (duration * delta_y / global.advance_time);
    draw_set_color(c_black);
    draw_rectangle(x-ww, yy_top, x+ww, y, false);
    draw_set_color(c_white);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
